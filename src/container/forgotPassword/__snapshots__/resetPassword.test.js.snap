// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Reset Password test resetPassword 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <ResetPassword>
    <div
      className="ForPassword"
    >
      <div
        className="Form-body"
      >
        <Formik
          initialValues={
            Object {
              "confirmPassword": "",
              "password": "",
            }
          }
          onSubmit={[Function]}
          validationSchema={
            ObjectSchema {
              "_blacklist": ReferenceSet {
                "list": Set {},
                "refs": Map {},
              },
              "_blacklistError": undefined,
              "_excludedEdges": Array [],
              "_nodes": Array [
                "confirmpassword",
                "password",
              ],
              "_sortErrors": [Function],
              "_typeError": [Function],
              "_whitelist": ReferenceSet {
                "list": Set {},
                "refs": Map {},
              },
              "_whitelistError": undefined,
              "conditions": Array [],
              "deps": Array [],
              "exclusiveTests": Object {},
              "fields": Object {
                "confirmpassword": StringSchema {
                  "_blacklist": ReferenceSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_blacklistError": undefined,
                  "_typeError": [Function],
                  "_whitelist": ReferenceSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_whitelistError": undefined,
                  "conditions": Array [],
                  "deps": Array [],
                  "exclusiveTests": Object {
                    "required": true,
                  },
                  "spec": Object {
                    "abortEarly": true,
                    "nullable": true,
                    "presence": "required",
                    "recursive": true,
                    "strict": false,
                    "strip": false,
                  },
                  "tests": Array [
                    [Function],
                  ],
                  "transforms": Array [
                    [Function],
                  ],
                  "type": "string",
                },
                "password": StringSchema {
                  "_blacklist": ReferenceSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_blacklistError": undefined,
                  "_typeError": [Function],
                  "_whitelist": ReferenceSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_whitelistError": undefined,
                  "conditions": Array [],
                  "deps": Array [],
                  "exclusiveTests": Object {
                    "required": true,
                  },
                  "spec": Object {
                    "abortEarly": true,
                    "nullable": true,
                    "presence": "required",
                    "recursive": true,
                    "strict": false,
                    "strip": false,
                  },
                  "tests": Array [
                    [Function],
                  ],
                  "transforms": Array [
                    [Function],
                  ],
                  "type": "string",
                },
              },
              "spec": Object {
                "abortEarly": true,
                "nullable": false,
                "presence": "optional",
                "recursive": true,
                "strict": false,
                "strip": false,
              },
              "tests": Array [],
              "transforms": Array [
                [Function],
              ],
              "type": "object",
            }
          }
        >
          <Form>
            <form
              action="#"
              onReset={[Function]}
              onSubmit={[Function]}
            >
              <div
                className="psswd-heading"
              >
                <h2
                  style={
                    Object {
                      "color": "white",
                      "fontFamily": "sans-serif",
                      "fontSize": "1.7rem",
                      "padding": "12px",
                      "textAlign": "center",
                    }
                  }
                >
                  Reset Password
                </h2>
              </div>
              <div
                className="form-group"
                style={
                  Object {
                    "marginLeft": "20px",
                    "marginRight": "20px",
                    "marginTop": "30px",
                  }
                }
              >
                <div
                  className="inputWithButtons"
                >
                  <Field
                    autoComplete="off"
                    className="form-control"
                    id="input1"
                    name="password"
                    onChange={[Function]}
                    placeholder="New Password"
                    style={
                      Object {
                        "borderRadius": "17px",
                      }
                    }
                    type="text"
                  >
                    <input
                      autoComplete="off"
                      className="form-control"
                      id="input1"
                      name="password"
                      onBlur={[Function]}
                      onChange={[Function]}
                      placeholder="New Password"
                      style={
                        Object {
                          "borderRadius": "17px",
                        }
                      }
                      type="text"
                      value=""
                    />
                  </Field>
                  <div
                    className="input-group-btn"
                  >
                    <styled.button
                      id="btn1"
                      onClick={[Function]}
                      type="button"
                    >
                      <button
                        className="sc-gsnTZi ifSsAs"
                        id="btn1"
                        onClick={[Function]}
                        type="button"
                      >
                        <ForwardRef(VisibilityOutlinedIcon)>
                          <ForwardRef(SvgIcon)
                            data-testid="VisibilityOutlinedIcon"
                          >
                            <MuiSvgIconRoot
                              aria-hidden={true}
                              as="svg"
                              className="MuiSvgIcon-root MuiSvgIcon-fontSizeMedium"
                              data-testid="VisibilityOutlinedIcon"
                              focusable="false"
                              ownerState={
                                Object {
                                  "children": <path
                                    d="M12 6c3.79 0 7.17 2.13 8.82 5.5C19.17 14.87 15.79 17 12 17s-7.17-2.13-8.82-5.5C4.83 8.13 8.21 6 12 6m0-2C7 4 2.73 7.11 1 11.5 2.73 15.89 7 19 12 19s9.27-3.11 11-7.5C21.27 7.11 17 4 12 4zm0 5c1.38 0 2.5 1.12 2.5 2.5S13.38 14 12 14s-2.5-1.12-2.5-2.5S10.62 9 12 9m0-2c-2.48 0-4.5 2.02-4.5 4.5S9.52 16 12 16s4.5-2.02 4.5-4.5S14.48 7 12 7z"
                                  />,
                                  "color": "inherit",
                                  "component": "svg",
                                  "data-testid": "VisibilityOutlinedIcon",
                                  "fontSize": "medium",
                                  "inheritViewBox": false,
                                  "instanceFontSize": undefined,
                                  "viewBox": "0 0 24 24",
                                }
                              }
                              viewBox="0 0 24 24"
                            >
                              <Insertion
                                cache={
                                  Object {
                                    "insert": [Function],
                                    "inserted": Object {
                                      "i4bv87-MuiSvgIcon-root": true,
                                    },
                                    "key": "css",
                                    "nonce": undefined,
                                    "registered": Object {},
                                    "sheet": StyleSheet {
                                      "_alreadyInsertedOrderInsensitiveRule": true,
                                      "_insertTag": [Function],
                                      "before": null,
                                      "container": <head>
                                        <style
                                          data-styled="active"
                                          data-styled-version="5.3.5"
                                        >
                                          .ifSsAs{border:1px solid white;background-color:white;}
                                        </style>
                                        <style
                                          data-emotion="css"
                                          data-s=""
                                        >
                                          
                                          .css-i4bv87-MuiSvgIcon-root{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;width:1em;height:1em;display:inline-block;fill:currentColor;-webkit-flex-shrink:0;-ms-flex-negative:0;flex-shrink:0;-webkit-transition:fill 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;transition:fill 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;font-size:1.5rem;}
                                        </style>
                                      </head>,
                                      "ctr": 1,
                                      "insertionPoint": undefined,
                                      "isSpeedy": false,
                                      "key": "css",
                                      "nonce": undefined,
                                      "prepend": undefined,
                                      "tags": Array [
                                        <style
                                          data-emotion="css"
                                          data-s=""
                                        >
                                          
                                          .css-i4bv87-MuiSvgIcon-root{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;width:1em;height:1em;display:inline-block;fill:currentColor;-webkit-flex-shrink:0;-ms-flex-negative:0;flex-shrink:0;-webkit-transition:fill 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;transition:fill 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;font-size:1.5rem;}
                                        </style>,
                                      ],
                                    },
                                  }
                                }
                                isStringTag={true}
                                serialized={
                                  Object {
                                    "map": undefined,
                                    "name": "i4bv87-MuiSvgIcon-root",
                                    "next": undefined,
                                    "styles": "label:MuiSvgIcon-root;user-select:none;width:1em;height:1em;display:inline-block;fill:currentColor;flex-shrink:0;transition:fill 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;font-size:1.5rem;",
                                    "toString": [Function],
                                  }
                                }
                              />
                              <svg
                                aria-hidden={true}
                                className="MuiSvgIcon-root MuiSvgIcon-fontSizeMedium css-i4bv87-MuiSvgIcon-root"
                                data-testid="VisibilityOutlinedIcon"
                                focusable="false"
                                viewBox="0 0 24 24"
                              >
                                <path
                                  d="M12 6c3.79 0 7.17 2.13 8.82 5.5C19.17 14.87 15.79 17 12 17s-7.17-2.13-8.82-5.5C4.83 8.13 8.21 6 12 6m0-2C7 4 2.73 7.11 1 11.5 2.73 15.89 7 19 12 19s9.27-3.11 11-7.5C21.27 7.11 17 4 12 4zm0 5c1.38 0 2.5 1.12 2.5 2.5S13.38 14 12 14s-2.5-1.12-2.5-2.5S10.62 9 12 9m0-2c-2.48 0-4.5 2.02-4.5 4.5S9.52 16 12 16s4.5-2.02 4.5-4.5S14.48 7 12 7z"
                                />
                              </svg>
                            </MuiSvgIconRoot>
                          </ForwardRef(SvgIcon)>
                        </ForwardRef(VisibilityOutlinedIcon)>
                      </button>
                    </styled.button>
                  </div>
                </div>
              </div>
              <div
                className="form-group"
                style={
                  Object {
                    "marginLeft": "20px",
                    "marginRight": "20px",
                    "marginTop": "30px",
                  }
                }
              >
                <div
                  className="inputWithButtons"
                >
                  <Field
                    className="form-control"
                    id="input2"
                    name="confirmPassword"
                    onChange={[Function]}
                    placeholder="Confirm Password"
                    style={
                      Object {
                        "borderRadius": "17px",
                      }
                    }
                    type="text"
                  >
                    <input
                      className="form-control"
                      id="input2"
                      name="confirmPassword"
                      onBlur={[Function]}
                      onChange={[Function]}
                      placeholder="Confirm Password"
                      style={
                        Object {
                          "borderRadius": "17px",
                        }
                      }
                      type="text"
                      value=""
                    />
                  </Field>
                  <div
                    className="input-group-btn"
                  >
                    <styled.button
                      id="btn2"
                      onClick={[Function]}
                      type="button"
                    >
                      <button
                        className="sc-gsnTZi ifSsAs"
                        id="btn2"
                        onClick={[Function]}
                        type="button"
                      >
                        <ForwardRef(VisibilityOutlinedIcon)>
                          <ForwardRef(SvgIcon)
                            data-testid="VisibilityOutlinedIcon"
                          >
                            <MuiSvgIconRoot
                              aria-hidden={true}
                              as="svg"
                              className="MuiSvgIcon-root MuiSvgIcon-fontSizeMedium"
                              data-testid="VisibilityOutlinedIcon"
                              focusable="false"
                              ownerState={
                                Object {
                                  "children": <path
                                    d="M12 6c3.79 0 7.17 2.13 8.82 5.5C19.17 14.87 15.79 17 12 17s-7.17-2.13-8.82-5.5C4.83 8.13 8.21 6 12 6m0-2C7 4 2.73 7.11 1 11.5 2.73 15.89 7 19 12 19s9.27-3.11 11-7.5C21.27 7.11 17 4 12 4zm0 5c1.38 0 2.5 1.12 2.5 2.5S13.38 14 12 14s-2.5-1.12-2.5-2.5S10.62 9 12 9m0-2c-2.48 0-4.5 2.02-4.5 4.5S9.52 16 12 16s4.5-2.02 4.5-4.5S14.48 7 12 7z"
                                  />,
                                  "color": "inherit",
                                  "component": "svg",
                                  "data-testid": "VisibilityOutlinedIcon",
                                  "fontSize": "medium",
                                  "inheritViewBox": false,
                                  "instanceFontSize": undefined,
                                  "viewBox": "0 0 24 24",
                                }
                              }
                              viewBox="0 0 24 24"
                            >
                              <Insertion
                                cache={
                                  Object {
                                    "insert": [Function],
                                    "inserted": Object {
                                      "i4bv87-MuiSvgIcon-root": true,
                                    },
                                    "key": "css",
                                    "nonce": undefined,
                                    "registered": Object {},
                                    "sheet": StyleSheet {
                                      "_alreadyInsertedOrderInsensitiveRule": true,
                                      "_insertTag": [Function],
                                      "before": null,
                                      "container": <head>
                                        <style
                                          data-styled="active"
                                          data-styled-version="5.3.5"
                                        >
                                          .ifSsAs{border:1px solid white;background-color:white;}
                                        </style>
                                        <style
                                          data-emotion="css"
                                          data-s=""
                                        >
                                          
                                          .css-i4bv87-MuiSvgIcon-root{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;width:1em;height:1em;display:inline-block;fill:currentColor;-webkit-flex-shrink:0;-ms-flex-negative:0;flex-shrink:0;-webkit-transition:fill 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;transition:fill 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;font-size:1.5rem;}
                                        </style>
                                      </head>,
                                      "ctr": 1,
                                      "insertionPoint": undefined,
                                      "isSpeedy": false,
                                      "key": "css",
                                      "nonce": undefined,
                                      "prepend": undefined,
                                      "tags": Array [
                                        <style
                                          data-emotion="css"
                                          data-s=""
                                        >
                                          
                                          .css-i4bv87-MuiSvgIcon-root{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;width:1em;height:1em;display:inline-block;fill:currentColor;-webkit-flex-shrink:0;-ms-flex-negative:0;flex-shrink:0;-webkit-transition:fill 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;transition:fill 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;font-size:1.5rem;}
                                        </style>,
                                      ],
                                    },
                                  }
                                }
                                isStringTag={true}
                                serialized={
                                  Object {
                                    "map": undefined,
                                    "name": "i4bv87-MuiSvgIcon-root",
                                    "next": undefined,
                                    "styles": "label:MuiSvgIcon-root;user-select:none;width:1em;height:1em;display:inline-block;fill:currentColor;flex-shrink:0;transition:fill 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;font-size:1.5rem;",
                                    "toString": [Function],
                                  }
                                }
                              />
                              <svg
                                aria-hidden={true}
                                className="MuiSvgIcon-root MuiSvgIcon-fontSizeMedium css-i4bv87-MuiSvgIcon-root"
                                data-testid="VisibilityOutlinedIcon"
                                focusable="false"
                                viewBox="0 0 24 24"
                              >
                                <path
                                  d="M12 6c3.79 0 7.17 2.13 8.82 5.5C19.17 14.87 15.79 17 12 17s-7.17-2.13-8.82-5.5C4.83 8.13 8.21 6 12 6m0-2C7 4 2.73 7.11 1 11.5 2.73 15.89 7 19 12 19s9.27-3.11 11-7.5C21.27 7.11 17 4 12 4zm0 5c1.38 0 2.5 1.12 2.5 2.5S13.38 14 12 14s-2.5-1.12-2.5-2.5S10.62 9 12 9m0-2c-2.48 0-4.5 2.02-4.5 4.5S9.52 16 12 16s4.5-2.02 4.5-4.5S14.48 7 12 7z"
                                />
                              </svg>
                            </MuiSvgIconRoot>
                          </ForwardRef(SvgIcon)>
                        </ForwardRef(VisibilityOutlinedIcon)>
                      </button>
                    </styled.button>
                  </div>
                </div>
              </div>
              <div
                className="cont"
                style={
                  Object {
                    "marginLeft": "25px",
                  }
                }
              >
                <button
                  className="reset-button"
                  type="submit"
                >
                  Reset
                </button>
              </div>
            </form>
          </Form>
        </Formik>
      </div>
    </div>
  </ResetPassword>
</Provider>
`;
